<?xml version="1.0" encoding="utf-8" ?>
<config>
	<include>
       <property name="mapping">mapping.xml</property>
       <property name="loop">false</property>
    </include>
	<!-- 100: db 200:file(200:local file , 201: ftp file) 300:socket 400:others -->
	<ds id="1" type="100">
		<property name="url">jdbc:oracle:thin:@10.5.15.4:1521:noap</property>
		<property name="driver">oracle.jdbc.driver.OracleDriver</property>
		<property name="username">noap</property>
		<property name="password">noap</property>
	</ds>
	<!-- to 与  resolve 是一对多关系, package为可选标签 -->

	<to id="1">
		<resolve dsid="1">

			<mapping name="WXWYCM01_%%Y%%M%%D%%H%%m_001.data" templet="山东联通综合分析系统配置数据-BSC.ftl">

				<sql>


<![CDATA[
select distinct hq.prov_code as 省份,
       hq.prov_enname||'OMC'||omc.engle_name||'_'||hq.en_name || 'BSC' || to_number(substr(bsc.ne_sys_id, 7, 3))  as BSC标识,
       bsc.china_name as BSC中文名称,
       map.bsc_state as BSC当前状态,--bsc.ans_code as 应答编号,
       hq.hq_id 所属城市标识,
      hq.en_name||map.mscname as 所属MSC标识,
      hq.prov_enname||'OMC'||omc.engle_name as 所属OMC标识,
       decode(omc.vendor,
              'ZY0800',
              4,
              'ZY0801',
              5,
              'ZY0803',
              6,
              'ZY0804',
              2,
              'ZY0806',
              4,
              'ZY0807',
              7,
              'ZY0808',
              1,
              'ZY0809',
              3,
              0) as 厂商标识,
       decode(omc.vendor,
              'ZY0800',
              decode(omc.version, 'B8', 1, 'B9', 2, 'B10', 3, 4),
              'ZY0801',
              decode(omc.version, 'R10', 1, 2),
              'ZY0803',
              1,
              'ZY0804',
              decode(omc.version, 'V2', 1, 2),
              'ZY0806',
              decode(omc.version, 'B8', 1, 'B9', 2, 'V10', 3, 4),
              'ZY0807',
              1,
              'ZY0808',
              decode(omc.version, 'V3R8', 1, 2),
              'ZY0809',
              decode(omc.version, 'RC60', 1, 'RC80', 2, 3),
              0) as 版本标识,
       sum(nvl(chan.rate,0)) 配置无线容量,
       count(distinct cell.related_bts) 基站配置数量,
       count(cell.ne_sys_id) 小区配置数量,
       sum(decode(cell.site_type,2, 1, 0)) 微蜂窝个数,
       sum(nvl(cell.zfz_num,0)) 直放站数量,
       sum(decode(trunc(cell.CARRIER_NUM),0,1,null,1,trunc(cell.CARRIER_NUM)))  as 载频数量,
       sum(decode(trunc(cell.CARRIER_USER_NUM), 0,1,null,1,1,1, 0)) 单载频小区数量,--为零的情况为1,或为空的 情况也为1
       sum(decode(trunc(cell.CARRIER_USER_NUM), 2, 1, 0)) 双载频小区数量,
       sum(decode(trunc(cell.CARRIER_USER_NUM), 3, 1, 0)) 三载频小区数量,
       sum(case when trunc(cell.CARRIER_USER_NUM) >= 4 then 1 else 0 end) as 四载频及以上小区数量,
       sum(decode(trunc(cell.carrier_user_num),0,1,null,1,trunc(cell.carrier_user_num))) as 开通载频数,
       sum(decode(cell.tch_count,0,6,null,6,trunc(cell.tch_count,0))) TCH配置数,
       sum(decode(cell.sdcch_count,0,8,null,8,trunc(cell.sdcch_count,0))) as  SDCCH配置数,
       max(bsc.ext_oid) as BSC唯一标识DN,
       max(bsc.fixedassets_id) as 固定资产编号

  from
       report_ne_bsc_g bsc ,
       cfg_bsc_map_city   map,
       report_cfg_map_dev_to_ne  mapne,
       ne_omc_g         omc,
       report_ne_cell_g    cell,
       cfg_city_map_hq_id hq,
       cfg_channel_eire chan
 where
      cell.ne_sys_id = mapne.ne_cell_id
  and cell.related_bsc = bsc.ne_sys_id
  and cell.related_bsc = map.ne_bsc_id
  and cell.related_msc = omc.omc_id
  and map.city_id = hq.city_id
  and cell.city_id = omc.city_id
  and bsc.ext_oid is not null
  and map.bsc_state is not null
  and chan.channel(+) = floor(cell.tch_count)
  and cell.stamptime = bsc.stamptime
  and cell.stamptime = to_date('%%Y%%M%%D','yyyymmdd')
  and cell.stamptime = mapne.stamptime
  and mapne.ISUPLOAD = 1
 group by omc.engle_name,bsc.ans_code,
          hq.prov_enname,
          hq.prov_code,
          bsc.china_name,
          cell.related_bsc,
          cell.related_msc,
          bsc.ne_sys_id,
          hq.hq_id,
          hq.en_name,
          bsc.BSC_PARA_ID,
          omc.vendor,
          omc.version,
          map.mscname,
          map.bsc_state


]]>


        </sql>
			</mapping>
			
			<mapping name="WXWYCM03_%%Y%%M%%D%%H%%m_001.data" templet="山东联通综合分析系统配置数据-GCELL.ftl">

				<sql>


<![CDATA[
select /*+leading(cell,map,bts,bsc,mapbsc,city,hq,cy)use_hash(cell,map,bts,bsc,mapbsc,city,hq,cy)*/ distinct substr(to_char(hq.hq_id), 1, 3) as 省份,
                map.mr_boolean as 是否采集MR,
                decode(map.mr_boolean, 0, '无', nvl(mac.host_ip, '无')) as 采集点标识,
                cell.LAC || '_' || cell.CI as 小区标识,
                replace(replace(nvl(cell.china_name,
                                    cell.LAC || '_' || cell.CI),
                                ',',
                                '_'),
                        '|',
                        '_') as 小区名称,
                nvl(hq.hq_id, city.city_id) as 所属城市标识,
                decode(cell.COVERTYPE,
                       '密集城区',
                       1,
                       '1',
                       1,
                       '城区',
                       2,
                       '2',
                       2,
                       '郊区',
                       3,
                       '3',
                       3,
                       '乡村',
                       4,
                       '4',
                       4,
                       5) as "所属城市区域",
                --decode(cell.ADMIN_REGIONS,1,1,2,2,3,3,'城区',1,'县城',2,'乡镇',3,9) as "所属行政区域类型",
                decode(cell.ADMIN_REGIONS,'1',1,'2',2,'3',3,'城区',1,'县城',2,'乡镇',3,9) as "所属行政区域类型",
                --tmp.ADMIN_REGIONS as 所属行政区域类型,
                --cell.COVERTYPE as 所属城市区域,
                hq.en_name || bsc.mscname as 所属MSC标识,
                hq.prov_enname || 'OMC' || substr(map.ne_omc_id, 4, 3) || '_' ||
                hq.en_name || 'BSC' ||
                to_number(substr(bsc.ne_bsc_id, 7, 3)) as 所属BSC标识,
                cell.RELATED_BTS as 所属BTS标识,
                decode(cell.vendor,
                       'ZY0800',
                       4,
                       'ZY0801',
                       5,
                       'ZY0803',
                       6,
                       'ZY0804',
                       2,
                       'ZY0806',
                       4,
                       'ZY0807',
                       7,
                       'ZY0808',
                       1,
                       'ZY0809',
                       3,
                       0) as 厂商标识,
                decode(cell.site_type,
                       1,
                       1,
                       2,
                       2,
                       3,
                       2,
                       4,
                       2,
                       5,
                       2,
                       6,
                       1,
                       1) 基站类型,
                cell.LAC as 位置区码,
                cell.CI as 小区码,
                nvl((case
                      when cell.bcch < 400 then
                       1
                      else
                       2
                    end),
                    1) as 频点类型,
                nvl(cell.ANT_HIGH, 35) as 天线挂高,
                nvl(cell.ANT_AZIMUTH,
                    (case
                      when cell.cell_num = 1 then
                       0
                      when cell.cell_num = 2 then
                       120
                      else
                       240
                    end)) 天线方向角,
                nvl(cell.ANT_ELECTANGLE, 0) as 电子下倾角,
                nvl(cell.ANT_MACHANGLE, 0) 机械倾角,
                decode(trunc(cell.CARRIER_NUM),
                       0,
                       1,
                       null,
                       1,
                       trunc(cell.CARRIER_NUM)) as 配置载频数,
                decode(trunc(cell.CARRIER_USER_NUM),
                       0,
                       1,
                       null,
                       1,
                       trunc(cell.CARRIER_USER_NUM)) as 可用载频数,
                decode(cell.sdcch_count,
                       0,
                       8,
                       null,
                       8,
                       trunc(cell.sdcch_count, 0)) as SDCCH配置信道数,
                trunc(decode(map.sdcch_user_count,
                             0,
                             decode(cell.sdcch_count,
                                    0,
                                    8,
                                    null,
                                    8,
                                    cell.sdcch_count),
                             null,
                             decode(cell.sdcch_count,
                                    0,
                                    8,
                                    null,
                                    8,
                                    cell.sdcch_count),
                             map.sdcch_user_count),
                      0) as SDCCH可用数,
                decode(cell.tch_count,
                       0,
                       6,
                       null,
                       6,
                       trunc(cell.tch_count, 0)) as TCH配置信道数,
                cell.CELL_STATE as 运行状态,
                case
                  when length(to_char(decode(cell.LONGITUDE,
                                             '',
                                             city.longitude_center,
                                             0,
                                             city.longitude_center,
                                             cell.LONGITUDE))) -
                       instr(to_char(decode(cell.LONGITUDE,
                                            '',
                                            city.longitude_center,
                                            0,
                                            city.longitude_center,
                                            cell.LONGITUDE)),
                             '.') < 4 then
                   decode(cell.LONGITUDE,
                          '',
                          city.longitude_center,
                          0,
                          city.longitude_center,
                          cell.LONGITUDE) + 0.00001
                  else
                   round(decode(cell.LONGITUDE,
                                '',
                                city.longitude_center,
                                0,
                                city.longitude_center,
                                cell.LONGITUDE),
                         8)
                end as 经度,
                case
                  when length(to_char(decode(cell.LATITUDE,
                                             '',
                                             city.latitude_center,
                                             0,
                                             city.latitude_center,
                                             cell.LATITUDE))) -
                       instr(to_char(decode(cell.LATITUDE,
                                            '',
                                            city.latitude_center,
                                            0,
                                            city.latitude_center,
                                            cell.LATITUDE)),
                             '.') < 4 then
                   decode(cell.LATITUDE,
                          '',
                          city.latitude_center,
                          0,
                          city.latitude_center,
                          cell.LATITUDE) + 0.00001
                  else
                   round(decode(cell.LATITUDE,
                                '',
                                city.latitude_center,
                                0,
                                city.latitude_center,
                                cell.LATITUDE),
                         8)
                end as 纬度,
                replace(replace(nvl(cell.ant_equipmodule, '无'), ',', '-'),
                        '|',
                        '-') 天线型号,
                nvl(cell.zfz_num, 0) as 带室外直放站数量,
                cell.trx_max_pwr as 载频最大发射功率,
                case
        when cell.cov_area = '1' then
          1
         when cell.cov_area = '2' then
          2
         when cell.cov_area = '室外' then
          1
         when cell.cov_area = '室内' then
          2
         when cell.cov_area = '室内拖室外' then
          3
         when cell.cov_area = '室外拖室内' then
          4
         when cell.cov_area is null then
          case
          when cell.site_type = 1 then
          1
          when cell.site_type != 1 or cell.site_type is null then
          2
         end else 2
       end as "小区覆盖类型",
                cell.cell 设备厂家CELL标识,
                cy.hq_county_id 所属区县标识,
                bts.pdch_num 静态配置PDCH信道数
  from report_ne_cell_g         cell,
       report_ne_bts_g          bts,
       cfg_city_map_hq_id       hq,
       report_cfg_map_dev_to_ne map,
       clt_conf_mac             mac,
       cfg_bsc_map_city         bsc,
       report_ne_bsc_g          mapbsc,
       cfg_city                 city,
       cfg_county_map_hq_id cy
       
 where cell.ne_sys_id = map.ne_cell_id
   and mac.dev_id(+) = map.mr_devid
   and cell.related_bsc = bsc.ne_bsc_id
   and cell.related_bsc = mapbsc.ne_sys_id
   and cell.related_bts = bts.ne_sys_id
   and map.city_id = city.city_id
   and city.city_id = hq.city_id
   and map.ISUPLOAD = 1
   and map.stamptime = cell.stamptime
   and mapbsc.stamptime = cell.stamptime
   and cell.stamptime = bts.stamptime
   and cell.stamptime = to_date('%%Y%%M%%D', 'yyyymmdd')
   and cell.CELL_STATE is not null
   and bts.ext_oid is not null
   and map.city_id = cy.city_id(+)
   and map.county_name = cy.county_name(+)

]]>


        </sql>
			</mapping>


				<mapping name="WXWYCM02_%%Y%%M%%D%%H%%m_001.data" templet="山东联通综合分析系统配置数据-BTS.ftl">

				<sql>


<![CDATA[

select /*+leading(bts,omc,hq,cc,cy)use_hash(bts,omc,hq,cc,cy)*/ substr(to_char(hq.hq_id), 1, 3) 省份,
       nvl(hq.hq_id, BTS.city_id) 所属城市标识,
       decode(BTS.vendor,
              'ZY0800',
              4,
              'ZY0801',
              5,
              'ZY0803',
              6,
              'ZY0804',
              2,
              'ZY0806',
              4,
              'ZY0807',
              7,
              'ZY0808',
              1,
              'ZY0809',
              3,
              0) 厂商标识,
       hq.prov_enname || 'OMC' || omc.engle_name as 所属OMC标识,
       RELATED_MSC 所属MSC标识,
       RELATED_BSC 所属BSC标识,
       NE_SYS_ID BTS标识,
       EXT_OID BTS唯一标识DN,
       replace(CHINA_NAME,',','NULL') BTS中文名称,
       FIXEDASSETS_ID 固定资产编号,
       LAC 位置区码,
       CI_LIST 小区标识列表,
       decode(omc.vendor,
              'ZY0800',
              decode(omc.version, 'B8', 1, 'B9', 2, 'B10', 3, 4),
              'ZY0801',
              decode(omc.version, 'R10', 1, 2),
              'ZY0803',
              1,
              'ZY0804',
              decode(omc.version, 'V2', 1, 2),
              'ZY0806',
              decode(omc.version, 'B8', 1, 'B9', 2, 'V10', 3, 4),
              'ZY0807',
              1,
              'ZY0808',
              decode(omc.version, 'V3R8', 1, 2),
              'ZY0809',
              decode(omc.version, 'RC60', 1, 'RC80', 2, 3),
              0) 版本标识,
       decode(bts.site_type,1,0,2,1,3,1,4,1,5,1,6,0,0) 基站类型,
       ANTENNA_TYPE 天线方向类型,
       case bts.WORKING_FREQ when 900 then '900MHz' when 1800 then '1800MHz' end     工作频率,
       bts.CARRIER_NUM       配置载频数,
       bts.CARRIER_USED      开通载频数,
       bts.CARRIER_AVAILABLE 可用载频数,
       TRX_1_CELL_NUM    单载频小区数量,
       TRX_2_CELL_NUM    双载频小区数量,
       TRX_3_CELL_NUM    三载频小区数量,
       TRX_4_CELL_NUM    四载频及以上小区数量,
       TCH_NUM           TCH配置数,
       SDCCH_NUM         SDCCH配置数,
       PDCH_NUM          静态PDCH配置数,
       SITE_STATE        基站状态,
       SITE_ADD as   基站站址,
       case
         when length(to_char(longitude)) -
              instr(to_char(longitude), '.') < 4 then
          longitude + 0.00001
         else
          round(longitude, 8)
       end "经度",
       case
         when length(to_char(Latitude)) - instr(to_char(Latitude), '.') < 4 then
         Latitude + 0.00001
         else
          round(Latitude, 8)
       end "纬度",
       cy.hq_county_id  所属区县标识,
       bts.equip_name  设备厂家BTS标识,
       decode(cc.site_abc,'VIP',0,'A',1,'B',2,'C',3,NULL) "基站分级", 
       cc.ZFZ_NUM  直放站数量,
       cc.CARRIER_NUM  载频数量,
       cc.pp  配置无线容量,
       cc.E1_NUM  E1端口数量
  from report_ne_bts_g BTS,ne_omc_g omc, cfg_city_map_hq_id hq,
       (select gg.related_bts, sum(ZFZ_NUM) ZFZ_NUM, sum(CARRIER_NUM) CARRIER_NUM, sum(nvl(a.rate, 0)) as pp,max(site_abc) site_abc,max(E1_NUM) E1_NUM 
          from report_ne_cell_g gg, cfg_channel_eire A
         where gg.stamptime =  to_date('%%Y%%M%%D','yyyymmdd')
           and A.channel = floor(gg.tch_count)
         group by gg.related_bts
        ) cc,
        (select cell.related_bts, max(c.hq_county_id) hq_county_id
          from report_ne_cell_g cell  join cfg_county_map_hq_id c
         on c.city_id = cell.city_id
           and cell.county_name = c.county_name
           and cell.stamptime =  to_date('%%Y%%M%%D','yyyymmdd')
         group by related_bts) cy         
 WHERE BTS.RELATED_MSC = omc.OMC_ID(+)
   AND BTS.city_id = hq.city_id(+)
   AND BTS.city_id = omc.city_id(+)
   and bts.ne_sys_id=cy.related_bts(+)
   AND BTS.EXT_OID IS NOT NULL
   and bts.SITE_STATE is not null
   and BTS.stamptime = to_date('%%Y%%M%%D','yyyymmdd')
   and bts.ne_sys_id = cc.related_bts(+)

]]>


        </sql>
			</mapping>

		</resolve>
	</to>
	
	<!-- 传输接口, 当只有path属性在时候为本地接口，其他则为远程接口 -->
	<ti id="1" after="1">
		<property name="ftpip">134.54.160.117</property>
		<property name="port">21</property>
		<property name="username">uwayftp</property>
		<property name="password">uwayftp</property>
		<property name="path">/gongke/perf_gsm</property><!--可以配置通配符HUB/WORK/-->
		<property name="encode">utf-8</property>
        </ti>
	<t>
		<action id="1" toid="1" tiid="1" strategyid="1"/><!---->
	</t>
	
	<!-- 默认失败不处理  0:正常   1:   2: -->
	<strategy id="1">
		<property name="failure">1,2,3</property>
	</strategy>
	
	<!-- before ,after ,exception -->
	<trigger id="11" class="cn.uway.nbi.task.triggerc.UpdateBean" />
</config>

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            